openapi: 3.0.3
info:
  title: VALR Technical Assessment
  description: VALR Technical Assessment
  version: 1.0.0
servers:
  - url: https://localhost
    description: VALRTechnicalAssessment
paths:
  /echoTest:
    get:
      tags:
        - echoTest
      summary: echoTest
      description: echoTest
      operationId: echoTest
      responses:
        '200':
          description: Ok
          content:
            text/plain:
              schema:
                type: string
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'

  /orderbook/{currencyPair}:
    get:
      tags:
        - orderbook
      summary: get Orderbook for currency pair
      description: get Orderbook for currency pair
      operationId: getOrderbook
      parameters:
        - in: path
          name: currencyPair
          schema:
            type: string
          required: true
          description: Currency Pair
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getOrderBookResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'

  /limitorder:
    post:
      tags:
        - orderslimit
      summary: Create a new limit order.
      description: Create a new limit order.
      operationId: postLimitOrder
      parameters:
        - name: X-VALR-API-KEY
          in: header
          description: your Api Key
          required: true
          schema:
            type: string
      requestBody:
        description: "limit order rquest body"
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/postLimitOrderRequest'
      responses:
        '202':
          description: Ok
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'
        '406':
          description:  Not Acceptable
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'


  /tradehistory/{currencyPair}:
    get:
      tags:
        - tradeHistory
      summary: get Trade History for currency pair with optional limit and skip
      description: get Trade History for currency pair with optional limit and skip
      operationId: getTradeHistory
      parameters:
        - in: path
          name: currencyPair
          schema:
            type: string
          required: true
          description: Currency Pair
        - name: pageSize
          in: query
          description: "limit the records returned"
          required: false
          schema:
            type: integer
        - name: pageNumber
          in: query
          description: "Page number"
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Ok
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getTradeHistoryResponse'
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/clientFriendlyException'

components:
  schemas:
    getOrderBookResponse:
      type: object
      properties:
        Asks:
          type: array
          items:
            $ref: '#/components/schemas/Orders'
        Bids:
          type: array
          items:
            $ref: '#/components/schemas/Orders'
        LastChange:
          type: string
          format: date-time
          example: "2025-02-12T11:16:12.064Z"
        SequenceNumber:
          type: integer
          format: int64
          example: 6916055818

    postLimitOrderRequest:
      type: object
      required:
        - side
        - quantity
        - price
        - pair
      properties:
        side:
          $ref: "#/components/schemas/SellBuySide"
        quantity:
          type: string
          description: "The quantity of the asset to be traded"
          example: "0.100000"
        price:
          type: string
          description: "The price at which the order is placed"
          example: "64250"
        pair:
          type: string
          description: "The trading pair (e.g., BTCUSDC)"
          example: "BTCUSDC"
        postOnly:
          type: boolean
          description: "Whether the order should be a post-only order"
          example: true
        customerOrderId:
          type: string
          description: "The customer-provided order ID"
          example: "1234"
        timeInForce:
          $ref: "#/components/schemas/TimeInForce"
        allowMargin:
          type: boolean
          description: "Whether margin trading is allowed. Default value is false"
          example: "false"
        reduceOnly:
          type: boolean
          description: "Whether the order is a reduce-only order. Default value is false"
          example: "false"
        conditionalOrderData:
          type: string
          description: "Used on futures pairs to manage exposure through adding a Take Profit and/or Stop Loss (TPSL) to the order"
          example: "false"

    postLimitOrderResponse:
      type: object
      properties:
        id:
          type: string
          description: "limit order UUID"
          example: "558f5e0a-ffd1-46dd-8fae-763d93fa2f25"


    getTradeHistoryResponse:
      type: array
      items:
        $ref: '#/components/schemas/TradeHistoryDetails'

    Orders:
      type: object
      properties:
        side:
          $ref: "#/components/schemas/SellBuySide"
        quantity:
          type: string
          description: "Quantity of the asset being traded"
          example: "0.00006"
        price:
          type: string
          description: "Price at which the order is placed"
          example: "1809439"
        currencyPair:
          type: string
          example: "BTCZAR"
        orderCount:
          type: integer
          description: "Number of orders at this price level"
          example: 1

    TradeHistoryDetails:
      type: object
      properties:
        price:
          type: string
          description: "The price of the trade"
          example: "1792421"
        quantity:
          type: string
          description: "The quantity of the asset traded"
          example: "0.00326263"
        currencyPair:
          type: string
          description: "The trading pair, e.g., BTCZAR"
          example: "BTCZAR"
        tradedAt:
          type: string
          format: date-time
          description: "Timestamp when the trade was executed"
          example: "2025-02-17T18:11:23.048Z"
        takerSide:
          $ref: "#/components/schemas/SellBuySide"
        sequenceId:
          type: integer
          format: int64
          description: "Unique sequence identifier for the trade"
          example: 1341109758534356995
        id:
          type: string
          description: "Unique identifier for the trade"
          example: "98579203-ed5a-11ef-94b8-8bb637837ae4"
        quoteVolume:
          type: string
          description: "The quoted volume for the trade"
          example: "5848.00652723"

    SellBuySide:
      type: string
      description: "buyer or seller side"
      enum:
        - "BUY"
        - "SELL"
      example: "SELL"

    TimeInForce:
      type: string
      description: "The time in force for the order"
      enum:
        - "GTC"  # Good-Til-Canceled
        - "IOC"  # Immediate-Or-Cancel
        - "FOK"  # Fill-Or-Kill
      example: "GTC"

    clientFriendlyException:
      type: object
      properties:
        reason:
          type: string